@model Lcapas.Core.Library.ResponseListViewObj

@section JavaScript {
    <script src="@Url.Content("~/Scripts/lcapas-transcripts.js?<?=time()?>")" type="text/javascript"></script>
}
@section JavaScriptVariables {
    <script type="text/javascript">
        var ExportTranscriptPath = '@Url.Action("ExportTranscriptColleague", "Transcripts")';
        var DisplayIframeDocumentPath = '@Url.Action("DisplayIframeDocument", "Transcripts")';
        var DisplayErrorMessagePath = '@Url.Action("DisplayErrorMessages", "Transcripts")';
        var MarkAsNotViewedPath = '@Url.Action("MarkAsNotViewed", "Transcripts")';
        var SendtoColleagueTRRQPath = '@Url.Action("SendtoColleagueTRRQ", "Transcripts")';
        var PrintRequestResponseReportPath = '@Url.Action("PrintRequestResponseReport", "Transcripts")';
        var StudentLookupPath = '@Url.Action("StudentLookup", "Transcripts")';
        var ParseResponsePath = '@Url.Action("ParseResponse", "Transcripts")';
    </script>
}
@section Menu {
    @RenderPage("~/Views/Menu/_TranscriptsMenu.cshtml")
}

@Html.AntiForgeryToken()
    <div class="container">
        <h2>@ViewBag.Title</h2>
        <div class="paging">
            @if (Model.TranscriptResponses != null)
            {
                <div class="page-last">
                    @if (Model.Pagination.PageIndex < Model.Pagination.PageCount)
                    {
                        <input id="lastPage" type="image" title="Last Page" value="" src="~/Content/images/last.png" class="button" />
                    }
                </div>
                <div class="page-next">
                    @if (Model.Pagination.PageIndex < Model.Pagination.PageCount)
                    {
                        <input id="nextPage" type="image" title="Next Page" value="" src="~/Content/images/next.png" class="button" />
                    }
                </div>
                <div class="page-num">
                    @Html.LabelFor(m => m.Pagination.PageIndex, new { @class = "control-label" }) @Html.DisplayFor(m => m.Pagination.PageIndex, new { @class = "text ui-widget-content ui-corner-all" }) of @Html.DisplayFor(m => m.Pagination.PageCount, new { @class = "text ui-widget-content ui-corner-all" })
                </div>
                <div class="page-prev">
                    @if (Model.Pagination.PageIndex > 1)
                    {
                        <input id="prevPage" type="image" title="Previous Page" value="" src="~/Content/images/prev.png" class="button" />
                    }
                </div>
                <div class="page-first">
                    @if (Model.Pagination.PageIndex > 1)
                    {
                        <input id="firstPage" type="image" title="First Page" value="" src="~/Content/images/first.png" class="button" />
                    }
                </div>
                <div class="page-size">
                    @Html.LabelFor(m => m.Pagination.PageSizes, new { @class = "control-label" })
                    @Html.DropDownListFor(m => m.Pagination.PageSize, Model.Pagination.PageSizes, string.Empty, new { @id = "pSize", @class = "text ui-widget-content ui-corner-all" })
                </div>
                <div class="page-results">
                    @Html.LabelFor(m => m.Pagination.RecCount, new { @class = "control-label" })
                    @Html.DisplayFor(m => m.Pagination.RecCount, new { @class = "text ui-widget-content ui-corner-all" })
                </div>
            }
        </div>
        <br />
        <div id="table-container">
            <table id="data-tbl" class="display">
                <thead class="columnScrolling ">
                    @using (Html.BeginForm(Model.DestAction.ToString(), "Transcripts", FormMethod.Post, new { DefaultButton = "search-btn", id = "submitForm" }))
                    {
                    <tr class="tableHeader">
                        <th></th>
                        <th>
                            @Html.LabelFor(m => m.SearchFilter.RespTransType, Model.SearchFilter.RespTransType.ToString(), new { @class = "control-label" })
                        </th>
                        <th>
                            @Html.LabelFor(m => m.SearchFilter.StudentRecord.FullName, new { @class = "control-label" })
                        </th>
                        <th>
                            @Html.LabelFor(m => m.SearchFilter.StudentRecord.Snumber, new { @class = "control-label" })
                        </th>
                        <th>
                            @Html.LabelFor(m => m.SearchFilter.StudentRecord.ASN, new { @class = "control-label" })
                        </th>
                        <th>
                            @if (Model.DestAction == Lcapas.Core.Library.Structs.DestActions.AdmissionsInbox)
                            {
                                <label class="control-label">From (Fulfilling Inst)</label>
                            }
                            else
                            {
                                <label class="control-label">To (Requesting Inst)</label>
                            }
                        </th>
                        <th>
                            @*@Html.LabelFor(m => m.SearchFilter.ListType, Model.SearchFilter.ListType.ToString(), new { @class = "control-label" })*@
                            @Html.LabelFor(m => m.SearchFilter.ListType, new { @class = "control-label" })
                        </th>
                        <th>
                            @Html.LabelFor(m => m.SearchFilter.HoldReasonType, new { @class = "control-label" })
                        </th>
                        <th>
                            @Html.LabelFor(m => m.SearchFilter.HoldTypeData, new { @class = "control-label" })
                        </th>
                        <th>
                            @Html.LabelFor(m => m.SearchFilter.Status, new { @class = "control-label" })
                        </th>
                        <th>
                            @Html.LabelFor(m => m.SearchFilter.Operator, new { @class = "control-label" })
                        </th>
                        <th>
                            @Html.LabelFor(m => m.SearchFilter.FromStatusDate, new { @class = "control-label" })
                        </th>
                        <th>
                            @Html.LabelFor(m => m.SearchFilter.ToStatusDate, new { @class = "control-label" })
                        </th>
                        @if (Model.DestAction == Lcapas.Core.Library.Structs.DestActions.RecordsOutbox)
                        {
                            <th>
                                @Html.Label("TRRQ", new { @class = "control-label" })
                            </th>
                        }
                        else
                        {
                            <th>
                                @Html.Label("Exported Colleague", new { @class = "control-label" })
                            </th>
                        }
                        <th title="Clear"></th>
                    </tr>
                        <tr class="tableHeader hide-scroll">
                            <th title="Select All" class="text-right col-xw-20">
                                <input type="checkbox" id="SelectAll" class="text" @(Model.DestAction == Lcapas.Core.Library.Structs.DestActions.AdmissionsInbox ? "unchecked" : "checked") >
                            </th>
                            <th title="Type" class="col-xw-50">
                                @Html.EnumDropDownListFor(m => m.SearchFilter.RespTransType, new { @class = "text ui-widget-content ui-corner-all searchfield" })
                            </th>
                            <th title="Student Name" class="col-xw-150">
                                @Html.TextBoxFor(m => m.SearchFilter.StudentRecord.FullName, new { @class = "text ui-widget-content ui-corner-all searchfield" })
                            </th>
                            <th title="sNumber" class="col-xw-60">
                                @Html.TextBoxFor(m => m.SearchFilter.StudentRecord.Snumber, new { @class = "text ui-widget-content ui-corner-all searchfield col-xw-60" })
                            </th>
                            <th title="ASN" class="col-xw-60">
                                @Html.TextBoxFor(m => m.SearchFilter.StudentRecord.ASN, new { @class = "text ui-widget-content ui-corner-all searchfield col-xw-60" })
                            </th>
                            <th title="Institution" class="col-xw-200">
                                @Html.DropDownListFor(m => m.SearchFilter.RequestingInstitution, Model.Institutions, "", new { @class = "text ui-widget-content ui-corner-all searchfield" })
                            </th>
                            <th title="List Type" class="col-xw-50">
                                @Html.EnumDropDownListFor(m => m.SearchFilter.ListType, new { @class = "text ui-widget-content ui-corner-all searchfield" })
                            </th>
                            <th title="Hold Type" class="col-xw-100">
                                @Html.EnumDropDownListFor(m => m.SearchFilter.HoldReasonType, new { @class = "text ui-widget-content ui-corner-all searchfield" })
                            </th>
                            <th title="Hold Type Data" class="col-xw-80">
                                @Html.TextBoxFor(m => m.SearchFilter.HoldTypeData, new { @class = "text ui-widget-content ui-corner-all searchfield col-xw-80" })
                            </th>
                            <th title="Status" class="col-xw-140">
                                @Html.DropDownListFor(m => m.SearchFilter.Status, Model.Statuses, "", new { @class = "text ui-widget-content ui-corner-all searchfield" })
                            </th>
                            <th title="Operator" class="col-xw-60">
                                @Html.TextBoxFor(m => m.SearchFilter.Operator, new { @class = "text ui-widget-content ui-corner-all searchfield col-xw-60" })
                            </th>
                            <th title="From Status Date" class="col-xw-100">
                                @Html.TextBoxFor(m => m.SearchFilter.FromStatusDate, new { @class = "text ui-widget-content ui-corner-all datepicker date-mask searchfield col-md-7" })
                            </th>
                            <th title="To Status Date" class="col-xw-100">
                                @Html.TextBoxFor(m => m.SearchFilter.ToStatusDate, new { @class = "text ui-widget-content ui-corner-all datepicker date-mask searchfield col-md-7" })
                            </th>
                            @if (Model.DestAction == Lcapas.Core.Library.Structs.DestActions.RecordsOutbox)
                            {
                                <th title="Sent to Colleague (TRRQ)" class="col-xw-10">
                                </th>
                            } else
                            {
                                <th title="Sent to Colleague" class="col-xw-10">
                                </th>
                            }
                            <th title="Clear" class="col-xw-80">
                                @if (Model.DestAction == Lcapas.Core.Library.Structs.DestActions.AdmissionsInbox)
                                {
                                    <input id="clear-btn" type="image" title="Clear" src="~/Content/images/eraser_small.png" class="submit-btn" onclick="location.href='@Url.Action("AdmissionsInbox", "Transcripts")';return false;" />
                                }
                                else
                                {
                                    <input id="clear-btn" type="image" title="Clear" src="~/Content/images/eraser_small.png" class="submit-btn" onclick="location.href='@Url.Action("RecordsOutbox", "Transcripts")';return false;" />
                                }
                                <input id="search-btn" type="image" title="Search" src="~/Content/images/search.png" class="submit-btn" />
                                @Html.HiddenFor(m => m.Pagination.PageIndex, new { id = "hf-pIndex" })
                                @Html.HiddenFor(m => m.Pagination.PageSize, new { id = "hf-pSize" })
                                @Html.HiddenFor(m => m.Pagination.PageCount, new { id = "hf-pCount" })

                                @Html.HiddenFor(m => m.SearchFilter.SelectedStuID, new { id = "selStuId" })
                                @Html.HiddenFor(m => m.SearchFilter.SelectedTransID, new { id = "selTransId" })
                                @Html.HiddenFor(m => m.SearchFilter.DestAction, new { id = "destAction" })
                                @Html.HiddenFor(m => m.Pagination.RecCount, new { id = "totalRes" })
                                @Html.HiddenFor(m => m.SearchFilter.FromUrlAction, new { id = "fromUrlAction" })
                            </th>
                        </tr>

                    }
                </thead>
                <tbody class="tableBody">
                    @if (Model.TranscriptResponses.Any())
                    {
                        foreach (var responseObj in Model.TranscriptResponses)
                        {
                            int? TranID = responseObj.Response.TransmissionData.TransmissionDataId;
                            string newResponseClass = (responseObj.Response.TransmissionData.ExportedDateTime == null && responseObj.Response.ViewedDateTime == null /*&& Model.DestAction == Lcapas.Core.Library.Structs.DestActions.AdmissionsInbox*/ ? "text-bold yellow" : "");
                            bool isResponse = (responseObj.Response.ResponseStatusType.HasValue && responseObj.Response.ResponseStatusType != Lcapas.Core.Library.Apas.AcademicRecord.ResponseStatusType.TranscriptSent);

                            <tr id="responseLine-@responseObj.Response.TransmissionData.Uuid" class="pad-left-tr-25 @newResponseClass" onmouseover="style.backgroundColor='lightblue';style.cursor='default';" onmouseout="style.backgroundColor=@(string.IsNullOrWhiteSpace(newResponseClass) ? "'white'" : "'#ffff78'");">
                                <td class="text-right col-xw-20">
                                    <input type="checkbox" name="@responseObj.Response.TransmissionData.Uuid" @(Model.DestAction == Lcapas.Core.Library.Structs.DestActions.AdmissionsInbox ? "unchecked" : "checked") />
                                </td>
                                <td class="col-xw-50">
                                    <input type="hidden" name="rowstuId" value="@responseObj.Response.RequestedStudent.StudentId" />
                                    <input type="hidden" name="rowtransId" value="@responseObj.Response.TransmissionData.TransmissionDataId" />
                                    @if (isResponse)
                                    {
                                        <label style="color:saddlebrown; font-weight:bold; font-size:large;">R</label>
                                    }
                                    else
                                    {
                                        <label style="color:darkblue; font-weight:bold; font-size:large;">T</label>
                                    }
                                </td>
                                <td class="col-xw-100">
                                    @{ Lcapas.Core.Models.Lcappsdb.PersonName _Name = null; }
                                    @if (responseObj.Response.RequestedStudent != null && responseObj.Response.RequestedStudent.Person.Names.Any())
                                    {
                                        //@responseObj.Response.RequestedStudent.Person.Names.Where(y => y.NameType == Lcapas.Core.Library.Structs.Name.PersonalNameType).OrderByDescending(x => x.CreatedDateTime).Select(s => s.LastName).FirstOrDefault()@:, @responseObj.Response.RequestedStudent.Person.Names.Where(y => y.NameType == Lcapas.Core.Library.Structs.Name.PersonalNameType).OrderByDescending(x => x.CreatedDateTime).Select(s => s.FirstName).FirstOrDefault()
                                        _Name = responseObj.Response.RequestedStudent.Person.Names.Where(y => y.NameType == Lcapas.Core.Library.Structs.Name.PersonalNameType).OrderByDescending(x => x.CreatedDateTime).FirstOrDefault();
                                        @_Name.LastName@:, @_Name.FirstName
                                    }
                                </td>
                                <td class="col-xw-60">
                                    @{ string _SNumber = string.Empty; }
                                    @*@if (responseObj.Response.RequestedStudent != null && responseObj.Response.RequestedStudent.sNumbers.Any())
                                    {
                                        @responseObj.Response.RequestedStudent.sNumbers.OrderByDescending(x => x.CreatedDateTime).Select(y => y.sNumVal).FirstOrDefault()
                                    }*@
                                    @if (responseObj.Response.RequestedStudent != null && responseObj.Response.RequestedStudent.sNumbers != null && responseObj.Response.RequestedStudent.sNumbers.Any())
                                    {
                                        _SNumber = responseObj.Response.RequestedStudent.sNumbers.OrderByDescending(x => x.CreatedDateTime).Select(y => y.sNumVal).FirstOrDefault();
                                    }
                                    else
                                    {
                                        if (responseObj.Response.MatchedStudent != null && responseObj.Response.MatchedStudent.sNumbers != null && responseObj.Response.MatchedStudent.sNumbers.Any())
                                        {
                                            _SNumber = responseObj.Response.MatchedStudent.sNumbers.OrderByDescending(x => x.CreatedDateTime).Select(y => y.sNumVal).FirstOrDefault();
                                        }
                                    }
                                    @_SNumber
                                </td>
                                <td class="col-xw-60">
                                    @{ string _Asn = null; }
                                    @if (responseObj.Response.RequestedStudent != null && responseObj.Response.RequestedStudent.ASNs.Any())
                                    {
                                        _Asn = responseObj.Response.RequestedStudent.ASNs.Where(x => x.StateProvinceCode == Lcapas.Core.Library.Apas.CoreMain.StateProvinceCodeType.AB).OrderByDescending(x => x.CreatedDateTime).Select(y => y.AgencyAssignedID).FirstOrDefault();
                                        @_Asn
                                    }
                                </td>
                                <td class="col-xw-200">
                                    @if (Model.DestAction == Lcapas.Core.Library.Structs.DestActions.AdmissionsInbox)
                                    {
                                        if (responseObj.Response.TransmissionData.SourceInstitution.InstitutionNames.Any())
                                        {
                                            @responseObj.Response.TransmissionData.SourceInstitution.InstitutionNames.OrderByDescending(x => x.CreatedDateTime).Select(s => s.Name).FirstOrDefault()
                                        }
                                    }
                                    else
                                    {
                                        if (responseObj.Response.TransmissionData.DestinationInstitution.InstitutionNames.Any())
                                        {
                                            @responseObj.Response.TransmissionData.DestinationInstitution.InstitutionNames.OrderByDescending(x => x.CreatedDateTime).Select(s => s.Name).FirstOrDefault()
                                        }
                                    }
                                </td>
                                <td class="@(responseObj.Response.TransmissionData.ExportedDateTime != null ? "color-green col-fw-130" : "color-gray") col-xw-50">
                                    @(responseObj.Response.TransmissionData.ExportedDateTime != null ? responseObj.Response.TransmissionData.ExportedDateTime.Value.ToString("yyyy/MM/dd hh:mm tt") : "New" )
                                </td>
                                <td class="col-xw-100">
                                    @if (responseObj.Response.ResponseHolds.Any())
                                    {
                                        @responseObj.Response.ResponseHolds.OrderByDescending(x => x.PlannedReleaseDate).Select(y => y.HoldReason).FirstOrDefault()
                                    }
                                </td>
                                <td class="col-xw-100">
                                    @if (responseObj.Response.ResponseHolds.Any())
                                    {
                                        switch (responseObj.Response.ResponseHolds.OrderByDescending(x => x.CreatedDateTime).Select(s => s.HoldReason).FirstOrDefault())
                                        {
                                            case Lcapas.Core.Library.Apas.AcademicRecord.HoldReasonType.Other:
                                            case Lcapas.Core.Library.Apas.AcademicRecord.HoldReasonType.Financial:
                                            //case Lcapas.Core.Library.Apas.AcademicRecord.HoldReasonType.TranscriptFee:
                                            case Lcapas.Core.Library.Apas.AcademicRecord.HoldReasonType.RequestedAction:
                                                @responseObj.Response.ResponseHolds.OrderByDescending(x => x.CreatedDateTime).Select(s => s.PlannedReleaseDate == null ? string.Empty : s.PlannedReleaseDate.Value.ToString("yyyy/MM/dd")).FirstOrDefault();
                                                break;
                                        }
                                    }
                                </td>
                                <td class="col-xw-140">
                                    @if (responseObj.Response.ResponseStatusType.HasValue)
                                    {
                                        @responseObj.Response.ResponseStatusType;
                                    }
                                    else
                                    {
                                        if (Model.DestAction == Lcapas.Core.Library.Structs.DestActions.AdmissionsInbox)
                                        {
                                            <label style="color:gray;"><em>Transcript Received</em></label>
                                        }
                                        else
                                        {
                                            <label style="color:gray;"><em>Transcript Sent</em></label>
                                        }
                                    }
                                </td>
                                <td class="col-xw-60">
                                    @if (!string.IsNullOrWhiteSpace(responseObj.Operator))
                                    {
                                        @responseObj.Operator
                                    }
                                </td>
                                <td colspan="2" class="col-xw-100">
                                    @if (responseObj.Response.CreatedDateTime != null)
                                    {
                                        @responseObj.Response.CreatedDateTime.ToString("yyyy/MM/dd hh:mm tt");
                                    }

                                    @if (!isResponse ||
                                        (isResponse &&
                                            (responseObj.Response.ResponseStatusType == Lcapas.Core.Library.Apas.AcademicRecord.ResponseStatusType.Canceled ||
                                             responseObj.Response.ResponseStatusType == Lcapas.Core.Library.Apas.AcademicRecord.ResponseStatusType.OfflineRecordSent)))
                                    {
                                        <img src="~/Content/Images/bullet_ball_glass_green.png" class="request-status pull-right" />
                                    }
                                    else if (isResponse)
                                    {
                                        <img src="~/Content/Images/bullet_ball_glass_yellow.png" class="request-status pull-right" />
                                    }
                                    else if (responseObj.ErrorMessageCount > 0)
                                    {
                                        <img src="~/Content/Images/bullet_ball_glass_red.png" class="request-status pull-right" />
                                    }
                                </td>
                                @if (Model.DestAction == Lcapas.Core.Library.Structs.DestActions.RecordsOutbox)
                                {
                                    <td class="sendToTRRQ text-center">

                                        @if (responseObj.RequestSentToTRRQ != null)
                                        {
                                            <img src="~/Content/Images/check.png" class="request-status" />
                                        }
                                    </td>
                                } else
                                {
                                    <td class="sendToColleague text-center">

                                        @if (responseObj.Response.TransmissionData.ExportedDateTime != null)
                                        {
                                            <img src="~/Content/Images/check.png" class="request-status" />
                                        }
                                    </td>
                                }
                                <td id="option-column" class="col-xw-80">
                                    <input type="hidden" key="selStuId" value="@responseObj.Response.RequestedStudent.StudentId" class="set-hidden" />
                                    <input type="hidden" key="selTransId" value="@responseObj.Response.TransmissionData.TransmissionDataId" class="set-hidden" />

                                    <div class="dropdown">
                                        <input title="View Options" type="image" class="dropdown-toggle submit-btn" src="~/Content/images/menu-dot-hor.png" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" />

                                        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                            @{
                                                string classCount = (responseObj.RequestCount > 0 ? "set-hidden-btn" : "empty");
                                                string destAction = (Model.DestAction == Lcapas.Core.Library.Structs.DestActions.AdmissionsInbox ? Lcapas.Core.Library.Structs.DestActions.AdmissionsOutbox : Lcapas.Core.Library.Structs.DestActions.RecordsInbox);
                                                string documentDesc = (responseObj.Response.ResponseStatusType.HasValue && responseObj.Response.ResponseStatusType != Lcapas.Core.Library.Apas.AcademicRecord.ResponseStatusType.TranscriptSent ? "Response" : "Transcript");
                                            }
                                            <a class="dropdown-item @classCount" href="#" title="View Requests" key="destAction" value="@destAction">
                                                <input type="image" class="submit-btn no-margin @classCount" src="~/Content/images/send_mail.png" />
                                                <span class="dropdown-item-content">View Requests <span class="badge badge-secondary">@responseObj.RequestCount</span></span>
                                            </a>

                                            @*<a class="dropdown-item" href="javascript:void(0);" title="View @documentDesc" onclick="PopupCenterDual('@Url.Action("DisplayMessage", "Transcripts", new { uuid = responseObj.Response.TransmissionData.Uuid })', 'Transcript', '850','800');">*@
                                            <a class="dropdown-item" href="javascript:void(0);" title="View @documentDesc" onclick="javascript:ViewDocumentDialog('@responseObj.Response.TransmissionData.Uuid');">
                                                <input type="image" class="submit-btn no-margin" src="~/Content/images/search_doc.png" />
                                                <span class="dropdown-item-content">View @documentDesc</span>
                                            </a>

                                            <a class="dropdown-item" href="javascript:void(0);" title="Mark As Unread" onclick="javascript:MarkAsNotViewed('@responseObj.Response.TransmissionData.Uuid', 'Response');">
                                                <input type="image" class="submit-btn no-margin" src="~/Content/images/send_mail.png" />
                                                <span class="dropdown-item-content">Mark As Unread</span>
                                            </a>

                                            @*Show Export to Colleague button only for Admission Inbox and for Transcripts*@
                                            @if (Model.DestAction == Lcapas.Core.Library.Structs.DestActions.AdmissionsInbox && responseObj.Response.TransmissionData.ExportedDateTime == null &&
                                                 (!isResponse)
                                                 && responseObj.Response.TransmissionData.SourceInstitution != null && !string.IsNullOrWhiteSpace(responseObj.Response.TransmissionData.SourceInstitution.LocalOrganizationID)
                                                 //&& responseObj.Response.TransmissionData.SourceInstitution.LocalOrganizationID == "AB00000000"
                                                 )
                                            {
                                                <a class="dropdown-item export-colleague-btn" href="#" title="Export to Colleague" transmissionDataId="@responseObj.Response.TransmissionData.TransmissionDataId">
                                                    <input type="image" class="no-margin empty" src="~/Content/images/send_doc.png" />
                                                    <span class="dropdown-item-content">Export to Colleague</span>
                                                </a>
                                                @*<a class="dropdown-item parse-colleague-btn" href="#" title="Parse Transcript" transmissionDataUuid="@responseObj.Response.TransmissionData.Uuid">
                                                    <input type="image" class="no-margin empty" src="~/Content/images/add_doc.png" />
                                                    <span class="dropdown-item-content">Parse Transcript</span>
                                                </a>*@
                                            }

                                            @if (responseObj.ErrorMessageCount > 0)
                                            {
                                                <a class="dropdown-item" href="javascript:void(0);" title="View Error Messages" onclick="javascript:ViewErrorMessageDialog('@responseObj.Response.TransmissionData.RequestTrackingID');">
                                                    <input type="image" class="submit-btn no-margin" src="~/Content/images/create_doc.png" />
                                                    <span class="dropdown-item-content">View Error Messages <span class="badge badge-secondary">@responseObj.ErrorMessageCount</span></span>
                                                </a>
                                            }

                                            @if (_Name != null)
                                            {
                                                if (!string.IsNullOrWhiteSpace(_Name.FirstName))
                                                {@Html.Hidden("firstName_" + responseObj.Response.TransmissionData.TransmissionDataId, _Name.FirstName, new { id = "firstName_" + responseObj.Response.TransmissionData.TransmissionDataId });
                                            }
                                            if (!string.IsNullOrWhiteSpace(_Name.MiddleNames))
                                            { @Html.Hidden("middleName_" + responseObj.Response.TransmissionData.TransmissionDataId, _Name.MiddleNames, new { id = "middleName_" + responseObj.Response.TransmissionData.TransmissionDataId });
                                        }
                                        if (!string.IsNullOrWhiteSpace(_Name.LastName))
                                        { @Html.Hidden("lastName_" + responseObj.Response.TransmissionData.TransmissionDataId, _Name.LastName, new { id = "lastName_" + responseObj.Response.TransmissionData.TransmissionDataId });
                                    }
                                }
                                            @if (!string.IsNullOrWhiteSpace(_SNumber))
                                            {@Html.Hidden("sNumber_" + responseObj.Response.TransmissionData.TransmissionDataId, _SNumber, new { id = "sNumber_" + responseObj.Response.TransmissionData.TransmissionDataId });
                                        }
                                            @if (!string.IsNullOrWhiteSpace(_Asn))
                                            {@Html.Hidden("asn_" + responseObj.Response.TransmissionData.TransmissionDataId, _Asn, new { id = "asn_" + responseObj.Response.TransmissionData.TransmissionDataId });
                                        }

                                            @{ DateTime? _BirthDate = responseObj.Response.RequestedStudent.Person.BirthDate; }
                                            @if (_BirthDate != null)
                                            {@Html.Hidden("birthDate_" + responseObj.Response.TransmissionData.TransmissionDataId, _BirthDate.Value.ToString("yyyy-MM-dd"), new { id = "birthDate_" + responseObj.Response.TransmissionData.TransmissionDataId });
                                        }

                                            @{ int? _Gender = (int?)responseObj.Response.RequestedStudent.Person.Genders.OrderByDescending(o => o.CreatedDateTime).Select(s => s.GenderCodeType).FirstOrDefault(); }
                                            @if (_Gender != null)
                                            {@Html.Hidden("gender_" + responseObj.Response.TransmissionData.TransmissionDataId, _Gender, new { id = "gender_" + responseObj.Response.TransmissionData.TransmissionDataId });
                                        }

                                            @if (Model.DestAction == Lcapas.Core.Library.Structs.DestActions.RecordsOutbox && responseObj.RequestSentToTRRQ == null)
                                            {
                                                <a class="dropdown-item" href="javascript:void(0);" title="Send To Colleague (TRRQ)" onclick="javascript:SendtoColleagueTRRQ('@responseObj.RequestTransDataUUID', 'Response', '@responseObj.Response.TransmissionData.RequestTrackingID');">
                                                    <input type="image" class="submit-btn no-margin" src="~/Content/images/send_doc.png" />
                                                    <span class="dropdown-item-content">Send To Colleague (TRRQ)</span>
                                                </a>
                                            }

                                        </div>
                                    </div>

                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="10" style="color:red;text-align:center;">
                                <br />No records found.
                                <br />Please enter search parameters and click 'Search'. <br />
                            </td>
                        </tr>
                    }

                </tbody>
            </table>
        </div>
        <div id="bottom_anchor"></div>
        <br />
        <div class="request-legend">
            <label>Legend: </label>
            <img src="~/Content/Images/bullet_ball_glass_green.png" class="request-status" />
            <label class="legend-item">Transcript Sent</label>
            <img src="~/Content/Images/bullet_ball_glass_yellow.png" class="request-status" />
            <label class="legend-item">Response Sent</label>
            <img src="~/Content/Images/bullet_ball_glass_red.png" class="request-status" />
            <label class="legend-item">Error Message</label>
        </div>

        <input id="prntReqResBtn" type="button" value="Print Transcripts/Responses" key="Response" onclick="return false" class="btn btn-default button pull-right hor-pad" />

    </div>
