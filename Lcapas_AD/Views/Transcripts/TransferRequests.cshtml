@model Lcapas.Core.Library.RequestListViewObj

@section JavaScript {
    <script src="@Url.Content("~/Scripts/lcapas-transcripts.js?<?=time()?>")" type="text/javascript"></script>
}
@section JavaScriptVariables {
    <script type="text/javascript">
        var DisplayIframeDocumentPath = '@Url.Action("DisplayIframeDocument", "Transcripts")';
        var DisplayErrorMessagePath = '@Url.Action("DisplayErrorMessages", "Transcripts")';
        var MarkAsNotViewedPath = '@Url.Action("MarkAsNotViewed", "Transcripts")';
        var SendtoColleagueTRRQPath = '@Url.Action("SendtoColleagueTRRQ", "Transcripts")';
        var PrintRequestResponseReportPath = '@Url.Action("PrintRequestResponseReport", "Transcripts")';
        var StudentLookupPath = '@Url.Action("StudentLookup", "Transcripts")';
    </script>
}
@section Menu {
    @RenderPage("~/Views/Menu/_TranscriptsMenu.cshtml")
}

@Html.AntiForgeryToken()
    <div class="container">
        <h2>@ViewBag.Title</h2>
        <div class="paging">
            @if (Model.TranscriptRequests.Any())
            {
                <div class="page-last">
                    @if (Model.Pagination.PageIndex < Model.Pagination.PageCount)
                    {
                        <input id="lastPage" type="image" title="Last Page" value="" src="~/Content/images/last.png" class="button" />
                    }
                </div>
                <div class="page-next">
                    @if (Model.Pagination.PageIndex < Model.Pagination.PageCount)
                    {
                        <input id="nextPage" type="image" title="Next Page" value="" src="~/Content/images/next.png" class="button" />
                    }
                </div>
                <div class="page-num">
                    @Html.LabelFor(m => m.Pagination.PageIndex, new { @class = "control-label" }) @Html.DisplayFor(m => m.Pagination.PageIndex, new { @class = "text ui-widget-content ui-corner-all" }) of @Html.DisplayFor(m => m.Pagination.PageCount, new { @class = "text ui-widget-content ui-corner-all" })
                </div>
                <div class="page-prev">
                    @if (Model.Pagination.PageIndex > 1)
                    {
                        <input id="prevPage" type="image" title="Previous Page" value="" src="~/Content/images/prev.png" class="button" />
                    }
                </div>
                <div class="page-first">
                    @if (Model.Pagination.PageIndex > 1)
                    {
                        <input id="firstPage" type="image" title="First Page" value="" src="~/Content/images/first.png" class="button" />
                    }
                </div>
                <div class="page-size">
                    @Html.LabelFor(m => m.Pagination.PageSizes, new { @class = "control-label" })
                    @Html.DropDownListFor(m => m.Pagination.PageSize, Model.Pagination.PageSizes, string.Empty, new { @id = "pSize", @class = "text ui-widget-content ui-corner-all" })
                </div>
                <div class="page-results">
                    @Html.LabelFor(m => m.Pagination.RecCount, new { @class = "control-label" })
                    @Html.DisplayFor(m => m.Pagination.RecCount, new { @class = "text ui-widget-content ui-corner-all" })
                </div>
            }
        </div>
        <br />
        <div id="table-container">
            <table id="data-tbl" class="display">
                <thead class="columnScrolling">
                    @using (Html.BeginForm(Model.DestAction, "Transcripts", FormMethod.Post, new { DefaultButton = "search-btn", id = "submitForm" }))
                    {
                    <tr class="tableHeader">
                        <th></th>
                        <th>
                            @Html.LabelFor(m => m.SearchFilter.StudentRecord.FullName, new { @class = "control-label" })
                        </th>
                        <th>
                            @Html.LabelFor(m => m.SearchFilter.StudentRecord.Snumber, new { @class = "control-label" })
                        </th>
                        <th>
                            @Html.LabelFor(m => m.SearchFilter.StudentRecord.ASN, new { @class = "control-label" })
                        </th>
                        <th>
                            @if (Model.DestAction == Lcapas.Core.Library.Structs.DestActions.AdmissionsOutbox)
                            {
                                <label class="control-label">To Fulfilling Institution</label>
                            }
                            else
                            {
                                <label class="control-label">From Requesting Institution</label>
                            }
                        </th>
                        <th>
                            @*@Html.LabelFor(m => m.SearchFilter.ListType, Model.SearchFilter.ListType.ToString(), new { @class = "control-label" })*@
                            @Html.LabelFor(m => m.SearchFilter.ListType, new { @class = "control-label" })
                        </th>
                        <th>
                            @Html.LabelFor(m => m.SearchFilter.HoldType, new { @class = "control-label" })
                        </th>
                        <th>
                            @Html.LabelFor(m => m.SearchFilter.HoldTypeData, new { @class = "control-label" })
                        </th>
                        <th>
                            @Html.LabelFor(m => m.SearchFilter.Status, new { @class = "control-label" })
                        </th>
                        <th>
                            @Html.LabelFor(m => m.SearchFilter.Operator, new { @class = "control-label" })
                        </th>
                        <th>
                            @Html.LabelFor(m => m.SearchFilter.FromStatusDate, new { @class = "control-label" })
                        </th>
                        <th>
                            @Html.LabelFor(m => m.SearchFilter.ToStatusDate, new { @class = "control-label" })
                        </th>
                        @if (Model.DestAction == Lcapas.Core.Library.Structs.DestActions.RecordsInbox)
                        {
                            <th>
                                @Html.Label("TRRQ", new { @class = "control-label" })
                            </th>
                        }
                        <th title="Clear"></th>
                    </tr>
                    <tr class="tableHeader hide-scroll">
                        <th title="Select All" class="text-right col-xw-30">
                            <input type="checkbox" id="SelectAll" class="text" checked>
                        </th>
                        <th title="Student Name" class="col-xw-120">
                            @Html.TextBoxFor(m => m.SearchFilter.StudentRecord.FullName, new { @class = "text ui-widget-content ui-corner-all searchfield col-xw-120  " })
                        </th>
                        <th title="sNumber" class="col-xw-80">
                            @Html.TextBoxFor(m => m.SearchFilter.StudentRecord.Snumber, new { @class = "text ui-widget-content ui-corner-all searchfield col-xw-80" })
                        </th>
                        <th title="ASN" class="col-xw-80">
                            @Html.TextBoxFor(m => m.SearchFilter.StudentRecord.ASN, new { @class = "text ui-widget-content ui-corner-all searchfield col-xw-80" })
                        </th>
                        <th title="Destination Organization" class="col-xw-200">
                            @Html.DropDownListFor(m => m.SearchFilter.DestinationOrganization, Model.Institutions, "", new { @class = "text ui-widget-content ui-corner-all searchfield col-xw-200" })
                        </th>
                        <th title="List Type" class="col-xw-50">
                            @Html.EnumDropDownListFor(m => m.SearchFilter.ListType, new { @class = "text ui-widget-content ui-corner-all searchfield" })
                        </th>
                        <th title="Hold Type" class="col-xw-100">
                            @Html.DropDownListFor(m => m.SearchFilter.HoldType, Model.Holdtypes, "", new { @class = "text ui-widget-content ui-corner-all searchfield" })
                        </th>
                        <th title="Hold Type Notes" class="col-xw-100">
                            @Html.TextBoxFor(m => m.SearchFilter.HoldTypeData, new { @class = "text ui-widget-content ui-corner-all searchfield col-xw-100" })
                        </th>
                        <th title="Status" class="col-xw-100">
                            @Html.DropDownListFor(m => m.SearchFilter.Status, Model.Statuses, "", new { @class = "text ui-widget-content ui-corner-all searchfield" })
                        </th>
                        <th title="Operator" class="col-xw-60">
                            @Html.TextBoxFor(m => m.SearchFilter.Operator, new { @class = "text ui-widget-content ui-corner-all searchfield col-xw-60" })
                        </th>
                        <th title="From Status Date" class="date-container col-xw-100">
                            @Html.TextBoxFor(m => m.SearchFilter.FromStatusDate, "{0:yyyy/MM/dd}", new { @class = "text ui-widget-content ui-corner-all datepicker date-mask searchfield col-md-7" })
                        </th>
                        <th title="To Status Date" class="date-container col-xw-100">
                            @Html.TextBoxFor(m => m.SearchFilter.ToStatusDate, "{0:yyyy/MM/dd}", new { @class = "text ui-widget-content ui-corner-all datepicker date-mask searchfield col-md-7" })
                        </th>
                        @if (Model.DestAction == Lcapas.Core.Library.Structs.DestActions.RecordsInbox)
                        {
                            <th title="Sent to Colleague (TRRQ)" class="col-xw-30">
                            </th>
                        }
                        <th title="Clear" class="col-xw-80">
                            @if (Model.DestAction == Lcapas.Core.Library.Structs.DestActions.AdmissionsOutbox)
                            {
                                <input id="clear-btn" type="image" title="Clear" src="~/Content/images/eraser_small.png" class="submit-btn" onclick="location.href='@Url.Action("AdmissionsOutbox", "Transcripts")';return false;" />
                            }
                            else
                            {
                                <input id="clear-btn" type="image" title="Clear" src="~/Content/images/eraser_small.png" class="submit-btn" onclick="location.href='@Url.Action("RecordsInbox", "Transcripts")';return false;" />
                            }
                            <input id="search-btn" type="image" title="Search" src="~/Content/images/search.png" class="submit-btn" />
                            @Html.HiddenFor(m => m.Pagination.PageIndex, new { id = "hf-pIndex" })
                            @Html.HiddenFor(m => m.Pagination.PageSize, new { id = "hf-pSize" })
                            @Html.HiddenFor(m => m.Pagination.PageCount, new { id = "hf-pCount" })

                            @Html.HiddenFor(m => m.SearchFilter.SelectedStuID, new { id = "selStuId" })
                            @Html.HiddenFor(m => m.SearchFilter.SelectedTransID, new { id = "selTransId" })
                            @Html.HiddenFor(m => m.SearchFilter.DestAction, new { id = "destAction" })
                            @Html.HiddenFor(m => m.Pagination.RecCount, new { id = "totalRes" })
                            @Html.HiddenFor(m => m.SearchFilter.FromUrlAction, new { id = "fromUrlAction" })
                        </th>
                    </tr>
                    }
                </thead>
                <tbody>
                    @if (Model.TranscriptRequests.Count > 0)
                    {
                        foreach (var requestObj in Model.TranscriptRequests)
                        {
                            string newRequestClass = (requestObj.Request.TransmissionData.ExportedDateTime == null && requestObj.Request.ViewedDateTime == null /*&& Model.DestAction == Lcapas.Core.Library.Structs.DestActions.RecordsInbox*/ ? "text-bold yellow" : "");
                            //string classColor = (requestObj.TranscriptCount > 0 ? "green" : (requestObj.ResponseCount > 0 ? "yellow" : (requestObj.ErrorMessageCount > 0 ? "red" : "")));

                            foreach (var recipient in requestObj.Request.Recipients)
                            {

                                @*<tr id="requestLine-@recipient.Request.TransmissionData.Uuid" class="pad-left-tr-25 @newRequestClass @classColor" onmouseover="style.backgroundColor='lightblue';style.cursor='default';" onmouseout="style.backgroundColor=@(requestObj.TranscriptCount > 0 ? "'#BBFED4'" : (requestObj.ResponseCount > 0 ? "'lightyellow'" : (requestObj.ErrorMessageCount > 0 ? "'#FEB1B4'" : "'white'")));">
                                *@
                                <tr id="requestLine-@recipient.Request.TransmissionData.Uuid" class="pad-left-tr-25 @newRequestClass" onmouseover="style.backgroundColor='lightblue';style.cursor='default';" onmouseout="style.backgroundColor=@(string.IsNullOrWhiteSpace(newRequestClass) ? "'white'" : "'#ffff78'");">
                                    <td class="col-xw-20">
                                        <input type="checkbox" name="@recipient.Request.TransmissionData.Uuid" checked>
                                    </td>
                                    <td class="col-xw-120">
                                        @{ Lcapas.Core.Models.Lcappsdb.PersonName _Name = null; }
                                        @if (recipient.Request.RequestedStudent.Person.Names.Any())
                                        {
                                            _Name = recipient.Request.RequestedStudent.Person.Names.Where(y => y.NameType == Lcapas.Core.Library.Structs.Name.PersonalNameType).OrderByDescending(o => o.CreatedDateTime).FirstOrDefault();
                                            @_Name.LastName@:, @_Name.FirstName
                                        }
                                    </td>
                                    <td class="col-xw-80">
                                        @{ string _SNumber = string.Empty; }
                                        @if (recipient.Request.RequestedStudent != null && recipient.Request.RequestedStudent.sNumbers != null && recipient.Request.RequestedStudent.sNumbers.Any())
                                        {
                                            _SNumber = recipient.Request.RequestedStudent.sNumbers.OrderByDescending(x => x.CreatedDateTime).Select(y => y.sNumVal).FirstOrDefault();
                                        }
                                        else
                                        {
                                            if (recipient.Request.MatchedStudent != null && recipient.Request.MatchedStudent.sNumbers != null && recipient.Request.MatchedStudent.sNumbers.Any())
                                            {
                                                _SNumber = recipient.Request.MatchedStudent.sNumbers.OrderByDescending(x => x.CreatedDateTime).Select(y => y.sNumVal).FirstOrDefault();
                                            }
                                        }
                                        @_SNumber
                                    </td>
                                    <td class="col-xw-80">
                                        @{ string _Asn = null; }
                                        @if (recipient.Request.RequestedStudent != null && recipient.Request.RequestedStudent.ASNs.Any())
                                        {
                                            _Asn = recipient.Request.RequestedStudent.ASNs.Where(x => x.StateProvinceCode == Lcapas.Core.Library.Apas.CoreMain.StateProvinceCodeType.AB).OrderByDescending(x => x.CreatedDateTime).Select(y => y.AgencyAssignedID).FirstOrDefault();
                                            @_Asn
                                        }
                                    </td>
                                    <td class="col-xw-210">
                                        @if (Model.DestAction == Lcapas.Core.Library.Structs.DestActions.AdmissionsOutbox)
                                        {
                                            if (recipient.Request.TransmissionData.DestinationInstitution.InstitutionNames.Any())
                                            {
                                                @recipient.Request.TransmissionData.DestinationInstitution.InstitutionNames.OrderByDescending(x => x.CreatedDateTime).Select(s => s.Name).FirstOrDefault()
                                            }
                                        }
                                        else
                                        {
                                            if (recipient.Request.TransmissionData.SourceInstitution.InstitutionNames.Any())
                                            {
                                                @recipient.Request.TransmissionData.SourceInstitution.InstitutionNames.OrderByDescending(x => x.CreatedDateTime).Select(s => s.Name).FirstOrDefault()
                                            }
                                        }
                                    </td>
                                    <td class="col-xw-50 @(recipient.Request.TransmissionData.ExportedDateTime != null ? "color-green col-fw-130" : "color-gray")">
                                        @(recipient.Request.TransmissionData.ExportedDateTime != null ? recipient.Request.TransmissionData.ExportedDateTime.Value.ToString("yyyy/MM/dd hh:mm tt") : "New" )
                                    </td>
                                    <td class="col-xw-100">
                                        @if (recipient.TranscriptHolds.Any())
                                        {
                                            @recipient.TranscriptHolds.OrderByDescending(x => x.CreatedDateTime).Select(s => s.HoldType).FirstOrDefault()
                                        }
                                    </td>
                                    <td class="col-xw-100">
                                        @if (recipient.TranscriptHolds.Any())
                                        {
                                            switch (recipient.TranscriptHolds.OrderByDescending(x => x.CreatedDateTime).Select(s => s.HoldType).FirstOrDefault())
                                            {
                                                case Lcapas.Core.Library.Apas.AcademicRecord.HoldTypeType.AfterSpecifiedTerm:
                                                case Lcapas.Core.Library.Apas.AcademicRecord.HoldTypeType.AfterGradesPosted:
                                                    @recipient.TranscriptHolds.OrderByDescending(x => x.CreatedDateTime).Select(s => s.SessionDesignator).FirstOrDefault();
                                                    break;
                                                case Lcapas.Core.Library.Apas.AcademicRecord.HoldTypeType.AfterSpecifiedDate:
                                                    @recipient.TranscriptHolds.OrderByDescending(x => x.CreatedDateTime).Select(s => s.ReleaseDate == null ? string.Empty : s.ReleaseDate.Value.ToString("yyyy/MM/dd")).FirstOrDefault();
                                                    break;
                                            }
                                        }
                                    </td>
                                    <td class="col-xw-100">
                                        @*@if (recipient.ResponseStatuses.Any())*@
                                        @if (requestObj.ResponseStatus != null)
                                        {
                                            @*@recipient.ResponseStatuses.OrderByDescending(x => x.ModifiedDateTime).FirstOrDefault().ResponseStatusType*@
                                            @requestObj.ResponseStatus
                                        }
                                        else
                                        {
                                            if (requestObj.ResponseCount > 0)
                                            {
                                                if (Model.DestAction == Lcapas.Core.Library.Structs.DestActions.AdmissionsOutbox)
                                                {
                                                    <label style="color:gray;"><em>Transcript Received</em></label>
                                                }
                                                else
                                                {
                                                    <label style="color:gray;"><em>Transcript Sent</em></label>
                                            }
                                        }
                                    }
                                    </td>
                                    <td class="col-xw-60">
                                        @if (!string.IsNullOrWhiteSpace(requestObj.Operator))
                                        {
                                            @requestObj.Operator
                                        }
                                    </td>
                                    <td colspan="2" class="col-xw-210">
                                        @if (recipient.CreatedDateTime != null)
                                        {
                                            @recipient.CreatedDateTime.ToString("yyyy/MM/dd hh:mm tt");
                                        }

                                        @if (requestObj.TranscriptCount > 0 ||
                                            (requestObj.ResponseCount > 0 &&
                                            (requestObj.ResponseStatus == Lcapas.Core.Library.Apas.AcademicRecord.ResponseStatusType.Canceled ||
                                            requestObj.ResponseStatus == Lcapas.Core.Library.Apas.AcademicRecord.ResponseStatusType.OfflineRecordSent)))
                                        {
                                            <img src="~/Content/Images/bullet_ball_glass_green.png" class="request-status pull-right" />
                                        }
                                        else if (requestObj.ResponseCount > 0)
                                        {
                                            <img src="~/Content/Images/bullet_ball_glass_yellow.png" class="request-status pull-right" />
                                        }
                                        else if (requestObj.ErrorMessageCount > 0)
                                        {
                                            <img src="~/Content/Images/bullet_ball_glass_red.png" class="request-status pull-right" />
                                        }
                                    </td>
                                    @if (Model.DestAction == Lcapas.Core.Library.Structs.DestActions.RecordsInbox)
                                    {
                                        <td class="col-xw-40 sendToTRRQ text-center">

                                            @if (requestObj.Request.SentToColleagueTRRQ != null)
                                            {
                                                <img src="~/Content/Images/check.png" class="request-status" />
                                            }
                                        </td>
                                    }

                                    <td id="option-column" class="col-xw-80" style="padding-left: 15px;">
                                        <input type="hidden" key="selStuId" value="@recipient.Request.RequestedStudent.StudentId" class="set-hidden" />
                                        <input type="hidden" key="selTransId" value="@recipient.Request.TransmissionData.TransmissionDataId" class="set-hidden" />

                                        <div class="dropdown">
                                            <input title="View Options" type="image" class="dropdown-toggle submit-btn" src="~/Content/images/menu-dot-hor.png" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" />

                                            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                                @{
                                                    string classCount = (requestObj.ResponseCount > 0 ? "set-hidden-btn" : "empty");
                                                    string destAction = (Model.DestAction == Lcapas.Core.Library.Structs.DestActions.AdmissionsOutbox ? "AdmissionsInbox" : "RecordsOutbox");
                                                }

                                                <a class="dropdown-item @classCount" href="javascript:void(0);" title="View Responses" key="destAction" value="@destAction">
                                                    <input type="image" class="submit-btn no-margin" src="~/Content/images/receive_mail.png" />
                                                    <span class="dropdown-item-content">View Responses <span class="badge badge-secondary">@requestObj.ResponseCount</span></span>
                                                </a>

                                                @*<a class="dropdown-item" href="javascript:void(0);" title="View Request" onclick="PopupCenterDual('@Url.Action("DisplayMessage", "Transcripts", new { uuid = recipient.Request.TransmissionData.Uuid })', 'Transcript', '850','800');">*@
                                                <a class="dropdown-item" href="javascript:void(0);" title="View Request" onclick="javascript:ViewDocumentDialog('@recipient.Request.TransmissionData.Uuid');">
                                                    <input type="image" class="submit-btn no-margin" src="~/Content/images/search_doc.png" />
                                                    <span class="dropdown-item-content">View Request</span>
                                                </a>

                                                <a class="dropdown-item" href="javascript:void(0);" title="Mark As Unread" onclick="javascript:MarkAsNotViewed('@recipient.Request.TransmissionData.Uuid', 'Request');">
                                                    <input type="image" class="submit-btn no-margin" src="~/Content/images/send_mail.png" />
                                                    <span class="dropdown-item-content">Mark As Unread</span>
                                                </a>

                                                @if (Model.DestAction == Lcapas.Core.Library.Structs.DestActions.RecordsInbox)
                                                {
                                                    <a class="dropdown-item set-hidden-btn" href="javascript:void(0);" title="Create Transcript" key="destAction" value="CreateTranscript">
                                                        <input type="image" class="submit-btn no-margin" src="~/Content/images/add_doc.png" />
                                                        <span class="dropdown-item-content">Create Transcript</span>
                                                    </a>

                                                    <a class="dropdown-item set-hidden-btn" href="javascript:void(0);" title="Create Response" key="destAction" value="CreateResponse">
                                                        <input type="image" class="submit-btn no-margin" src="~/Content/images/add_doc.png" />
                                                        <span class="dropdown-item-content">Create Response</span>
                                                    </a>
                                                }

                                                @if (requestObj.ErrorMessageCount > 0)
                                                {
                                                    <a class="dropdown-item" href="javascript:void(0);" title="View Error Messages" onclick="javascript:ViewErrorMessageDialog('@recipient.Request.TransmissionData.RequestTrackingID');">
                                                        <input type="image" class="submit-btn no-margin" src="~/Content/images/create_doc.png" />
                                                        <span class="dropdown-item-content">View Error Messages <span class="badge badge-secondary">@requestObj.ErrorMessageCount</span></span>
                                                    </a>
                                                }

                                                @if (_Name != null)
                                                {
                                                    if (!string.IsNullOrWhiteSpace(_Name.FirstName)) { @Html.Hidden("firstName_" + recipient.Request.TransmissionData.Uuid, _Name.FirstName, new { id = "firstName_" + recipient.Request.TransmissionData.Uuid }); }
                                                    if (!string.IsNullOrWhiteSpace(_Name.MiddleNames)) { @Html.Hidden("middleName_" + recipient.Request.TransmissionData.Uuid, _Name.MiddleNames, new { id = "middleName_" + recipient.Request.TransmissionData.Uuid }); }
                                                    if (!string.IsNullOrWhiteSpace(_Name.LastName)) { @Html.Hidden("lastName_" + recipient.Request.TransmissionData.Uuid, _Name.LastName, new { id = "lastName_" + recipient.Request.TransmissionData.Uuid }); }
                                                }

                                                @if (recipient.Request.RequestedStudent.Person.Names.Any())
                                                {
                                                    List<Lcapas.Core.Models.Lcappsdb.PersonName> _FormerNames = null;

                                                    _FormerNames = recipient.Request.RequestedStudent.Person.Names.Where(y => y.NameType == Lcapas.Core.Library.Structs.Name.FormerType).OrderByDescending(o => o.CreatedDateTime).ToList();
                                                    int count = 0;
                                                    foreach (var formerName in _FormerNames)
                                                    {
                                                        if (!string.IsNullOrWhiteSpace(formerName.FirstName)) { @Html.Hidden("formerFirstName_" + count.ToString() + "_" + recipient.Request.TransmissionData.Uuid, formerName.FirstName, new { @class = "formerFirstName_" + recipient.Request.TransmissionData.Uuid }); }
                                                        if (!string.IsNullOrWhiteSpace(formerName.MiddleNames)) { @Html.Hidden("formerMiddleName_" + count.ToString() + "_" + recipient.Request.TransmissionData.Uuid, formerName.MiddleNames, new { @class = "formerMiddleName_" + recipient.Request.TransmissionData.Uuid }); }
                                                        if (!string.IsNullOrWhiteSpace(formerName.LastName)) { @Html.Hidden("formerLastName_" + count.ToString() + "_" + recipient.Request.TransmissionData.Uuid, formerName.LastName, new { @class = "formerLastName_" + recipient.Request.TransmissionData.Uuid }); }
                                                        count++;
                                                    }
                                                    @Html.Hidden("formerNameCount_" + recipient.Request.TransmissionData.Uuid, count);
                                                }
                                                @if (!string.IsNullOrWhiteSpace(_SNumber)) { @Html.Hidden("sNumber_" + recipient.Request.TransmissionData.Uuid, _SNumber, new { id = "sNumber_" + recipient.Request.TransmissionData.Uuid }); }
                                                @if (!string.IsNullOrWhiteSpace(_Asn)) { @Html.Hidden("asn_" + recipient.Request.TransmissionData.Uuid, _Asn, new { id = "asn_" + recipient.Request.TransmissionData.Uuid }); }

                                                @{ DateTime? _BirthDate = recipient.Request.RequestedStudent.Person.BirthDate; }
                                                @if (_BirthDate != null) { @Html.Hidden("birthDate_" + recipient.Request.TransmissionData.Uuid, _BirthDate.Value.ToString("yyyy-MM-dd"), new { id = "birthDate_" + recipient.Request.TransmissionData.Uuid }); }

                                                @{ int? _Gender = (int?)recipient.Request.RequestedStudent.Person.Genders.OrderByDescending(o => o.CreatedDateTime).Select(s => s.GenderCodeType).FirstOrDefault(); }
                                                @if (_Gender != null) { @Html.Hidden("gender_" + recipient.Request.TransmissionData.Uuid, _Gender, new { id = "gender_" + recipient.Request.TransmissionData.Uuid }); }

                                                @if (Model.DestAction == Lcapas.Core.Library.Structs.DestActions.RecordsInbox && requestObj.Request.SentToColleagueTRRQ == null)
                                                {
                                                    <a class="dropdown-item" href="javascript:void(0);" title="Send To Colleague (TRRQ)" onclick="javascript:SendtoColleagueTRRQ('@recipient.Request.TransmissionData.Uuid', 'Response');">
                                                        <input type="image" class="submit-btn no-margin" src="~/Content/images/send_doc.png" />
                                                        <span class="dropdown-item-content">Send To Colleague (TRRQ)</span>
                                                    </a>
                                                }
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="10" style="color:red;text-align:center;">
                                <br />No records found.
                                <br />Please enter search parameters and click 'Search'. <br />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div id="bottom_anchor"></div>
        <br />
        <div class="request-legend">
            <label>Legend: </label>
            <img src="~/Content/Images/bullet_ball_glass_green.png" class="request-status" />
            <label class="legend-item">Transcript Sent</label>
            <img src="~/Content/Images/bullet_ball_glass_yellow.png" class="request-status" />
            <label class="legend-item">Response Sent</label>
            <img src="~/Content/Images/bullet_ball_glass_red.png" class="request-status" />
            <label class="legend-item">Error Message</label>
        </div>

        <input id="prntReqResBtn" type="button" value="Print Requests" key="Request" onclick="return false" class="btn btn-default button pull-right hor-pad" />

    </div>
